diff -ru pjlib/include/pj/guid.h pjlib/include/pj/guid.h
--- pjlib/include/pj/guid.h	2012-07-18 07:52:33.000000000 +0000
+++ pjlib/include/pj/guid.h	2018-11-21 14:26:22.613194669 +0000
@@ -109,6 +109,26 @@
  */
 PJ_DECL(void) pj_create_unique_string_lower(pj_pool_t *pool, pj_str_t *str);
 
+/**
+ * Create a globally unique string based on device unique id, 
+ * which length is PJ_GUID_STRING_LENGTH characters. 
+ * Caller is responsible for preallocating the storage used
+ * in the string.
+ *
+ * @param str       The string to store the result.
+ *
+ * @return          The string.
+ */
+PJ_DECL(pj_str_t*) pj_generate_unique_device_string(pj_str_t *str);
+
+/**
+ * Generate a unique string based on device unique id.
+ *
+ * @param pool	    Pool to allocate memory from.
+ * @param str	    The string.
+ */
+PJ_DECL(void) pj_create_unique_device_string(pj_pool_t *pool, pj_str_t *str);
+
 
 /**
  * @}
diff -ru pjlib/src/pj/guid.c pjlib/src/pj/guid.c
--- pjlib/src/pj/guid.c	2012-07-18 07:52:33.000000000 +0000
+++ pjlib/src/pj/guid.c	2018-11-21 14:25:36.658080393 +0000
@@ -46,3 +46,13 @@
     for (i = 0; i < str->slen; i++)
 	str->ptr[i] = (char)pj_tolower(str->ptr[i]);
 }
+
+PJ_DEF(void) pj_create_unique_device_string(pj_pool_t *pool, pj_str_t *str)
+{
+    str->ptr = (char*)pj_pool_alloc(pool, PJ_GUID_STRING_LENGTH);
+    pj_generate_unique_device_string(str);
+
+    if (str == NULL) {
+        pj_generate_unique_string(str);
+    }
+}
diff -ru pjlib/src/pj/guid_android.c pjlib/src/pj/guid_android.c
--- pjlib/src/pj/guid_android.c	2017-03-07 03:28:56.000000000 +0000
+++ pjlib/src/pj/guid_android.c	2018-11-21 14:25:56.163128896 +0000
@@ -118,3 +118,79 @@
     detach_jvm(attached);
     return NULL;
 }
+
+PJ_DEF(pj_str_t*) pj_generate_unique_device_string(pj_str_t *str)
+{
+
+    JNIEnv *jni_env = 0;
+    jclass build_class;
+    jmethodID get_callid;
+    jstring callid;
+    const char *native_string;
+    pj_str_t native_str;
+
+    pj_bool_t attached = attach_jvm(&jni_env);
+    if (!jni_env)
+        goto on_error;
+
+    build_class = (*jni_env)->FindClass(jni_env, "org/pjsip/PjCallID");
+
+    /* Exception check and handling */
+    if ((*jni_env)->ExceptionCheck(jni_env)) {
+        goto handle_exception;
+    }
+
+    if (build_class == NULL || build_class == 0)
+        goto on_error;
+
+    get_callid = (*jni_env)->GetStaticMethodID(jni_env, build_class,
+                "getCallID",
+                "()Ljava/lang/String;");
+
+    /* Exception check and handling */
+    if ((*jni_env)->ExceptionCheck(jni_env)) {
+        goto handle_exception;
+    }
+
+    if (get_callid == NULL || get_callid == 0)
+        goto on_error;
+
+    callid = (*jni_env)->CallStaticObjectMethod(jni_env, build_class, get_callid);
+
+    /* Exception check and handling */
+    if ((*jni_env)->ExceptionCheck(jni_env)) {
+        goto handle_exception;
+    }
+
+    if (callid == NULL || callid == 0)
+        goto on_error;
+
+    native_string = (*jni_env)->GetStringUTFChars(jni_env, callid,
+                            JNI_FALSE);
+
+    /* Exception check and handling */
+    if ((*jni_env)->ExceptionCheck(jni_env)) {
+        goto handle_exception;
+    }
+
+    if (native_string == 0)
+        goto on_error;
+
+    native_str.ptr = (char *)native_string;
+    native_str.slen = pj_ansi_strlen(native_string);
+    pj_strncpy(str, &native_str, PJ_GUID_STRING_LENGTH);
+
+    (*jni_env)->ReleaseStringUTFChars(jni_env, callid, native_string);
+    detach_jvm(attached);
+
+    return str;
+
+handle_exception:
+    (*jni_env)->ExceptionClear(jni_env);
+    goto on_error;
+
+on_error:
+    PJ_LOG(2, ("guid_android.c", ("Error generating Device Unique ID")));
+    detach_jvm(attached);
+    return NULL;
+}
diff -ru pjsip/src/pjsip-ua/sip_reg.c pjsip/src/pjsip-ua/sip_reg.c
--- pjsip/src/pjsip-ua/sip_reg.c	2016-06-30 08:23:08.000000000 +0000
+++ pjsip/src/pjsip-ua/sip_reg.c	2018-11-21 14:27:05.616301604 +0000
@@ -386,7 +386,7 @@
 
     /* Set "Call-ID" header. */
     regc->cid_hdr = pjsip_cid_hdr_create(regc->pool);
-    pj_create_unique_string(regc->pool, &regc->cid_hdr->id);
+    pj_create_unique_device_string(regc->pool, &regc->cid_hdr->id);
 
     /* Set "CSeq" header. */
     regc->cseq_hdr = pjsip_cseq_hdr_create(regc->pool);
